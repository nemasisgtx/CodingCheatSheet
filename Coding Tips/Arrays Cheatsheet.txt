Add/Remove - 
push() adds to the end.
unshift() adds to the start.
pop() removes from end.
shift() removes from beginning.
//
Searching -
indexOf() returns the index of the specified element.
includes() returns boolean if it contains the specified element.
//
Iteration- 
for and forEach()
//

Find - 
find() method returns first element of the array that satisfies the condition specified in the callback function.
Eg.
const x = [1, 2, 3, 4, 5];
const y = x.find(el => el*2 === 2);
console.log("y is: ", y); // y is: 1
the value of y is 1. 
This is because the find() method searches for first element in the array that satisfies the condition specified.
//
Filter - 
filter() returns a new array that contains only the elements that meet a certain condition.
map() returns a new array that contains the result of applying a function to each element.
Eg.
const x = [1, 2, 3, 4, 5];
const y = x.filter(el => el*2 === 2);
console.log("y is: ", y); // y is: [1]
the value of y is an array of 1 element that satisfies the condition. 
This is because the filter() method iterates over all elements of the array and then returns a filtered array which satisfy the condition specified.
//
The main differences between above examples is:

1) filter() returns an array containing the element that satisfies the condition, but find() returns the element itself that satisfies the condition.
2) In filter(), whole array is iterated despite the fact that the element being searched for is present at the beginning. But in find(), as soon as the element that satisfies the condition is found, it gets returned.
Sorting - 
sort() sorts the array based on the function definition can be alphabetically or numeric or custom.
//
Combining/Splitting - 
concat() combines 2 arrays into single array.

slice() can split one array into multiple arrays.
It takes two arguments: the starting index and the ending index (which is optional).
It returns a new array that contains the elements between the starting and ending indexes, with the original array remaining unchanged.
Eg. 
const myArray = [1, 2, 3, 4, 5];
const slicedArray = myArray.slice(1, 3);
console.log(slicedArray); // Output: [2, 3]
console.log(myArray); // Output: [1, 2, 3, 4, 5]
The original array remains unchanged.
Creates a new array and returns a copy of a portion of the original array.
//

splice() modifies the original array by adding or removing elements at a specific position.
It takes three arguments: the starting index, 
the number of elements to remove (optional), and the elements to add (optional).
It returns an array containing the removed elements, 
or an empty array if no elements were removed.
Eg. 
const myArray = [1, 2, 3, 4, 5];
const removedElements = myArray.splice(1, 2, 6, 7);
console.log(removedElements); // Output: [2, 3]
console.log(myArray); // Output: [1, 6, 7, 4, 5]
Original array changes.
Modifies the original array by adding or removing elements at a specific position.